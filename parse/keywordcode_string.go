// Code generated by "stringer -type KeywordCode keyword_code.go"; DO NOT EDIT.

package parse

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[KeywordCodeUnspecified-0]
	_ = x[KeywordCodeAll-1]
	_ = x[KeywordCodeAnd-2]
	_ = x[KeywordCodeAny-3]
	_ = x[KeywordCodeArray-4]
	_ = x[KeywordCodeAs-5]
	_ = x[KeywordCodeAsc-6]
	_ = x[KeywordCodeAssertRowsModified-7]
	_ = x[KeywordCodeAt-8]
	_ = x[KeywordCodeBetween-9]
	_ = x[KeywordCodeBy-10]
	_ = x[KeywordCodeCase-11]
	_ = x[KeywordCodeCast-12]
	_ = x[KeywordCodeCollate-13]
	_ = x[KeywordCodeContains-14]
	_ = x[KeywordCodeCreate-15]
	_ = x[KeywordCodeCross-16]
	_ = x[KeywordCodeCube-17]
	_ = x[KeywordCodeCurrent-18]
	_ = x[KeywordCodeDefault-19]
	_ = x[KeywordCodeDefine-20]
	_ = x[KeywordCodeDesc-21]
	_ = x[KeywordCodeDistinct-22]
	_ = x[KeywordCodeElse-23]
	_ = x[KeywordCodeEnd-24]
	_ = x[KeywordCodeEnum-25]
	_ = x[KeywordCodeEscape-26]
	_ = x[KeywordCodeExcept-27]
	_ = x[KeywordCodeExclude-28]
	_ = x[KeywordCodeExists-29]
	_ = x[KeywordCodeExtract-30]
	_ = x[KeywordCodeFalse-31]
	_ = x[KeywordCodeFetch-32]
	_ = x[KeywordCodeFollowing-33]
	_ = x[KeywordCodeFor-34]
	_ = x[KeywordCodeFrom-35]
	_ = x[KeywordCodeFull-36]
	_ = x[KeywordCodeGroup-37]
	_ = x[KeywordCodeGrouping-38]
	_ = x[KeywordCodeGroups-39]
	_ = x[KeywordCodeHash-40]
	_ = x[KeywordCodeHaving-41]
	_ = x[KeywordCodeIf-42]
	_ = x[KeywordCodeIgnore-43]
	_ = x[KeywordCodeIn-44]
	_ = x[KeywordCodeInner-45]
	_ = x[KeywordCodeIntersect-46]
	_ = x[KeywordCodeInterval-47]
	_ = x[KeywordCodeInto-48]
	_ = x[KeywordCodeIs-49]
	_ = x[KeywordCodeJoin-50]
	_ = x[KeywordCodeLateral-51]
	_ = x[KeywordCodeLeft-52]
	_ = x[KeywordCodeLike-53]
	_ = x[KeywordCodeLimit-54]
	_ = x[KeywordCodeLookup-55]
	_ = x[KeywordCodeMerge-56]
	_ = x[KeywordCodeNatural-57]
	_ = x[KeywordCodeNew-58]
	_ = x[KeywordCodeNo-59]
	_ = x[KeywordCodeNot-60]
	_ = x[KeywordCodeNull-61]
	_ = x[KeywordCodeNulls-62]
	_ = x[KeywordCodeOf-63]
	_ = x[KeywordCodeOn-64]
	_ = x[KeywordCodeOr-65]
	_ = x[KeywordCodeOrder-66]
	_ = x[KeywordCodeOuter-67]
	_ = x[KeywordCodeOver-68]
	_ = x[KeywordCodePartition-69]
	_ = x[KeywordCodePreceding-70]
	_ = x[KeywordCodeProto-71]
	_ = x[KeywordCodeRange-72]
	_ = x[KeywordCodeRecursive-73]
	_ = x[KeywordCodeRespect-74]
	_ = x[KeywordCodeRight-75]
	_ = x[KeywordCodeRollup-76]
	_ = x[KeywordCodeRows-77]
	_ = x[KeywordCodeSelect-78]
	_ = x[KeywordCodeSet-79]
	_ = x[KeywordCodeSome-80]
	_ = x[KeywordCodeStruct-81]
	_ = x[KeywordCodeTablesample-82]
	_ = x[KeywordCodeThen-83]
	_ = x[KeywordCodeTo-84]
	_ = x[KeywordCodeTreat-85]
	_ = x[KeywordCodeTrue-86]
	_ = x[KeywordCodeUnbound-87]
	_ = x[KeywordCodeUnion-88]
	_ = x[KeywordCodeUnnest-89]
	_ = x[KeywordCodeUsing-90]
	_ = x[KeywordCodeWhen-91]
	_ = x[KeywordCodeWhere-92]
	_ = x[KeywordCodeWindow-93]
	_ = x[KeywordCodeWith-94]
	_ = x[KeywordCodeWithin-95]
}

const _KeywordCode_name = "KeywordCodeUnspecifiedKeywordCodeAllKeywordCodeAndKeywordCodeAnyKeywordCodeArrayKeywordCodeAsKeywordCodeAscKeywordCodeAssertRowsModifiedKeywordCodeAtKeywordCodeBetweenKeywordCodeByKeywordCodeCaseKeywordCodeCastKeywordCodeCollateKeywordCodeContainsKeywordCodeCreateKeywordCodeCrossKeywordCodeCubeKeywordCodeCurrentKeywordCodeDefaultKeywordCodeDefineKeywordCodeDescKeywordCodeDistinctKeywordCodeElseKeywordCodeEndKeywordCodeEnumKeywordCodeEscapeKeywordCodeExceptKeywordCodeExcludeKeywordCodeExistsKeywordCodeExtractKeywordCodeFalseKeywordCodeFetchKeywordCodeFollowingKeywordCodeForKeywordCodeFromKeywordCodeFullKeywordCodeGroupKeywordCodeGroupingKeywordCodeGroupsKeywordCodeHashKeywordCodeHavingKeywordCodeIfKeywordCodeIgnoreKeywordCodeInKeywordCodeInnerKeywordCodeIntersectKeywordCodeIntervalKeywordCodeIntoKeywordCodeIsKeywordCodeJoinKeywordCodeLateralKeywordCodeLeftKeywordCodeLikeKeywordCodeLimitKeywordCodeLookupKeywordCodeMergeKeywordCodeNaturalKeywordCodeNewKeywordCodeNoKeywordCodeNotKeywordCodeNullKeywordCodeNullsKeywordCodeOfKeywordCodeOnKeywordCodeOrKeywordCodeOrderKeywordCodeOuterKeywordCodeOverKeywordCodePartitionKeywordCodePrecedingKeywordCodeProtoKeywordCodeRangeKeywordCodeRecursiveKeywordCodeRespectKeywordCodeRightKeywordCodeRollupKeywordCodeRowsKeywordCodeSelectKeywordCodeSetKeywordCodeSomeKeywordCodeStructKeywordCodeTablesampleKeywordCodeThenKeywordCodeToKeywordCodeTreatKeywordCodeTrueKeywordCodeUnboundKeywordCodeUnionKeywordCodeUnnestKeywordCodeUsingKeywordCodeWhenKeywordCodeWhereKeywordCodeWindowKeywordCodeWithKeywordCodeWithin"

var _KeywordCode_index = [...]uint16{0, 22, 36, 50, 64, 80, 93, 107, 136, 149, 167, 180, 195, 210, 228, 247, 264, 280, 295, 313, 331, 348, 363, 382, 397, 411, 426, 443, 460, 478, 495, 513, 529, 545, 565, 579, 594, 609, 625, 644, 661, 676, 693, 706, 723, 736, 752, 772, 791, 806, 819, 834, 852, 867, 882, 898, 915, 931, 949, 963, 976, 990, 1005, 1021, 1034, 1047, 1060, 1076, 1092, 1107, 1127, 1147, 1163, 1179, 1199, 1217, 1233, 1250, 1265, 1282, 1296, 1311, 1328, 1350, 1365, 1378, 1394, 1409, 1427, 1443, 1460, 1476, 1491, 1507, 1524, 1539, 1556}

func (i KeywordCode) String() string {
	if i < 0 || i >= KeywordCode(len(_KeywordCode_index)-1) {
		return "KeywordCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _KeywordCode_name[_KeywordCode_index[i]:_KeywordCode_index[i+1]]
}
